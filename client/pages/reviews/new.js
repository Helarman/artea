import Head from 'next/head';
import { useState } from 'react';
import Error from '@/components/Error/Error';
import NavbarSecondary from '@/components/Navbar/NavbarSecondary';
import Footer from '@/components/Footer/Footer'
import styles from '@/components/Reviews/feedbackform.module.scss'


const RequestArrow = () => {
  return (
    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M11.2784 15.6781L5.62844 10.0181C5.53471 9.9251 5.46032 9.8145 5.40955 9.69264C5.35878 9.57079 5.33264 9.44008 5.33264 9.30807C5.33264 9.17606 5.35878 9.04535 5.40955 8.92349C5.46032 8.80163 5.53471 8.69103 5.62844 8.59807C5.8158 8.41182 6.06925 8.30727 6.33344 8.30727C6.59763 8.30727 6.85108 8.41182 7.03844 8.59807L12.0384 13.5481L16.9884 8.59807C17.1758 8.41182 17.4293 8.30727 17.6934 8.30727C17.9576 8.30727 18.2111 8.41182 18.3984 8.59807C18.4929 8.69068 18.5681 8.80113 18.6196 8.923C18.6711 9.04488 18.6979 9.17576 18.6984 9.30807C18.6979 9.44037 18.6711 9.57126 18.6196 9.69313C18.5681 9.81501 18.4929 9.92545 18.3984 10.0181L12.7484 15.6781C12.6548 15.7796 12.5411 15.8606 12.4146 15.916C12.2881 15.9714 12.1515 16 12.0134 16C11.8753 16 11.7387 15.9714 11.6122 15.916C11.4857 15.8606 11.3721 15.7796 11.2784 15.6781Z" fill="#898989" />
    </svg>
  )
}


export const getServerSideProps = async ({ query }) => {
  const { code = 1 } = query; //default code
  const [res1, res2, res3] = await Promise.all([
    fetch(`http://localhost:1337/api/global?populate=*`),
    fetch(`http://localhost:1337/api/review-page?populate=*`),
    fetch(`http://localhost:1337/api/portfolio?fields[0]=uuid`),
  ]);

  const [data1, data2, data3] = await Promise.all([
    res1.json(),
    res2.json(),
    res3.json()
  ])

  return {
    props: { global: data1, pageData: data2, portfolio: data3, code: code },

  }
};


function timer(time, domain) {//timer for redirection
  var timer = setInterval(function () {
    if (time <= 0) {
      clearInterval(timer);
      document.location = domain;
    } else {
      time--;
    }
  }, time)
}

const parseJSON = resp => (resp.json ? resp.json() : resp);
const checkStatus = resp => {
  if (resp.status >= 200 && resp.status < 300) {
    return resp;
  }
  return parseJSON(resp).then(resp => {
    throw resp;
  });
};
const headers = {
  'Content-Type': 'application/json',
};

const CreateReview = ({ portfolio, pageData, global, code }) => {
  const page = pageData.data.attributes;
  const connectType = pageData.data.attributes.connectType;
  const uuidData = portfolio.data.map(({ attributes: { uuid }, ...item }) => (uuid));

  const [modifiedData, setModifiedData] = useState({
    code: '',
    name: '',
    organization: ``,
    communication: ``,
    text: '',
    connectionType: '',
    connect: '',
    onHomepage: false,
    publishedAt: null
  });

  const handleChange = ({ target: { name, value } }) => {
    setModifiedData(prev => ({
      ...prev,
      [name]: value,
    }));
  };


  const handleSubmit = async e => {
    const uuidInclude = uuidData.includes(`${code}`);
    if (uuidInclude) {
      e.preventDefault();

      try {
        const response = await fetch('http://localhost:1337/api/reviews', {
          method: 'POST',
          headers,
          body: JSON.stringify({ data: modifiedData }),
        })
          .then(checkStatus)
          .then(parseJSON);
      } catch (error) {
        timer(5, "/reviews/error");
      }
      timer(5, "/reviews/success");
    }
    else {
      alert(`Такой код не существует`)
    }
  };
  if (code === 1) {
    return (
      <Error
        errorCode={`001`}
        errorName={`Вы не можете оставить отзыв`}
        errorText={`Код не существует`}
      />)
  };
  return (
    <div className={`body-sett`}>
      <Head>
        <title>Artea - web stuido</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavbarSecondary global={global} />
      <div className={`container`}>
        <div className={`row`}>
          <div className={`col-xxl-8 offset-xxl-2 col-xl-10 offset-xl-1`}>
            <div className={styles.formHeader}>
              <h1>{page.formTitle}</h1>
              <p>{page.formDescription}</p>
            </div>
            <div className={styles.requestForm}>
              <form onSubmit={handleSubmit}>

                <label className={styles.labelForm}>Код проекта</label>
                <input className={`${styles.inputForm} ${styles.nameInput}`} type="text" name="code" value={code} onChange={handleChange} required disabled />

                <label className={styles.labelForm} for="#">{page.nameLabel}</label>
                <input className={`${styles.inputForm} ${styles.nameInput}`} type="text" name="name" placeholder={page.namePlaceholder} required></input>

                <label className={styles.labelForm} for="#">{page.orgLabel}</label>
                <input className={`${styles.inputForm} ${styles.mailInput}`} type="text" placeholder={`“${page.orgPlaceholder}”`}></input>

                <label className={styles.labelForm} for="#">{page.phoneLabel}</label>
                <input className={`${styles.inputForm} ${styles.phoneInput} ${styles.artStranger}`} type="tel" placeholder={page.phonePlaceholder}></input>

                <label className={styles.labelForm} for="#">{page.emailLabel}</label>
                <input className={`${styles.inputForm} ${styles.mailInput}`} type="text" placeholder={page.emailPlaceholder}></input>

                <label className={styles.labelForm} for="#">{page.connectLabel}</label>
                <div className={styles.requestSelect}>
                  <div className={styles.selectArrow}>
                    <RequestArrow />
                  </div>
                  <select className={styles.connectForm} name="connectForm">
                    {connectType.map(({ id, connectTypeLabel, type }) => (
                      <option key={id} value={type}>{connectTypeLabel}</option>
                    ))}
                  </select>
                </div>

                <label className={`${styles.labelForm} ${styles.descriptionInput}`} for="#">{page.textLabel}</label>
                <textarea name="descriptionForm" className={styles.descriptionForm} rows="5" placeholder={page.textPlaceholder}></textarea>

                {/*<div className={styles.checkboxConf}>
                  <input className={styles.boxConf} id="box1" type="checkbox"></input>
                  <label className={styles.labelBoxConf} for="box1">Согласен с <a href="#">политикой конфиденциальности</a></label>
                </div>

                <div className={styles.checkboxPerm}>
                  <input className={styles.boxPerm} id="box2" type="checkbox"></input>
                  <label className={styles.labelBoxPerm} for="box2">Даю свое разрешение на публикацию отзыва на сайте</label>
                    </div>*/}

                <button className={styles.buttonForm} type="submit">Отправить</button>

              </form>
            </div>
          </div>
        </div>
      </div>
      <Footer global={global} />
    </div>
  );
};

export default CreateReview;